@startuml

interface Visitor{
    +visitNumber(number: Number)
    +visitVariable(variable: Variable)
    +visitSum(sum: Sum)
    +visitMultiplication(multiplication: Multiplication)
    +visitPower(power: Power)
    +visitSquareRoot(squareRoot: SquareRoot)
}

class EvaluationVisitor implements Visitor{
    +visitNumber(number: Number)
    +visitVariable(variable: Variable)
    +visitSum(sum: Sum)
    +visitMultiplication(multiplication: Multiplication)
    +visitPower(power: Power)
    +visitSquareRoot(squareRoot: SquareRoot)
}

class PrintVisitor implements Visitor{
    +visitNumber(number: Number)
    +visitVariable(variable: Variable)
    +visitSum(sum: Sum)
    +visitMultiplication(multiplication: Multiplication)
    +visitPower(power: Power)
    +visitSquareRoot(squareRoot: SquareRoot)
}

class ListVariablesVisitor implements Visitor{
    +variables: List<String>
    +visitNumber(number: Number)
    +visitVariable(variable: Variable)
    +visitSum(sum: Sum)
    +visitMultiplication(multiplication: Multiplication)
    +visitPower(power: Power)
    +visitSquareRoot(squareRoot: SquareRoot)
}

class VariableResolutionVisitor implements Visitor{
    +variables: Map<String, Number>
    +visitNumber(number: Number)
    +visitVariable(variable: Variable)
    +visitSum(sum: Sum)
    +visitMultiplication(multiplication: Multiplication)
    +visitPower(power: Power)
    +visitSquareRoot(squareRoot: SquareRoot)
}

interface Expression{
    +accept(v: Visitor)
}

class Variable implements Expression{
    +accept(v: Visitor)
}

class Number implements Expression{
    +accept(v: Visitor)
}

class Sum implements Expression{
    +accept(v: Visitor)
}

class Multiplication implements Expression{
    +accept(v: Visitor)
}

class Power implements Expression{
    +accept(v: Visitor)
}

class SquareRoot implements Expression{
    +accept(v: Visitor)
}

Visitor --> Variable
Visitor --> Number
Visitor --> Sum
Visitor --> Multiplication
Visitor --> SquareRoot
Visitor --> Power
Expression --> Visitor


@enduml